//
// PSMoveProtocol.proto: protobuf definition file for the PSMove Service Protocol
//
// Brendan Walker (brendan@millerwalker.net)
//
syntax = "proto3";
package PSMoveProtocol;

enum ControllerType {
    PSMOVE= 0;
    PSNAVI= 1;
}

message Pixel {
    float x = 1;
    float y = 2;
}

message FloatVector {
    float i = 1;
    float j = 2;
    float k = 3;
}

message IntVector {
    int32 i = 1;
    int32 j = 2;
    int32 k = 3;
}

message Position {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Orientation{
    float x = 1;
    float y = 2;
    float z = 3;
    float w = 4;
}

message Ellipse
{
    Pixel center = 1;
    float half_x_extent = 2;
    float half_y_extent = 3;
    float angle = 4;    
}

message Polygon
{
    repeated Pixel vertices = 1;
}

message OptionSet {
	string option_name = 1;
	repeated string option_strings = 2;
	int32 option_index = 3;
}

message Pose {
    Orientation orientation= 1;
    Position position= 2;
}

enum TrackerType {
    PS3EYE = 0;
}

enum TrackerDriver {
    LIBUSB = 0;
    CL_EYE = 1;
    CL_EYE_MULTICAM = 2;
    GENERIC_WEBCAM = 3;
}

enum TrackingColorType {
    Magenta = 0;
    Cyan = 1;
    Yellow = 2;
    Red = 3;
    Green = 4;
    Blue = 5;
    MAX_PSMOVE_COLOR_PRESETS = 6;
};

message TrackingColorPreset {
    TrackingColorType color_type = 1;
    float hue_center = 2;
    float hue_range = 3;
    float saturation_center = 4;
    float saturation_range = 5;
    float value_center = 6;
    float value_range = 7;
}

// Reliable (TCP) requests that can issued to the PSMove Service
message Request {
    // Unique id for this request.
    // Used to keep track of which response is associated with which request
    // when multiple requests are in-flight.
    int32 request_id = 1;

    // The request type determines which of the request structures is actually used
    enum RequestType {
        GET_CONTROLLER_LIST = 0;
        START_CONTROLLER_DATA_STREAM = 1;
        STOP_CONTROLLER_DATA_STREAM = 2;
        SET_RUMBLE = 3;
        RESET_POSE = 4;
        UNPAIR_CONTROLLER= 5;
        PAIR_CONTROLLER= 6;
        CANCEL_BLUETOOTH_REQUEST= 7;
        SET_LED_COLOR= 8;
        SET_LED_TRACKING_COLOR= 9;
        SET_MAGNETOMETER_CALIBRATION= 10;

        GET_TRACKER_LIST = 11;
        START_TRACKER_DATA_STREAM = 12;
        STOP_TRACKER_DATA_STREAM = 13;
        GET_TRACKER_SETTINGS = 14;
        SET_TRACKER_EXPOSURE = 15;
        SET_TRACKER_GAIN = 16;
        SET_TRACKER_OPTION = 17;
        SET_TRACKER_COLOR_PRESET = 18;
        SET_TRACKER_POSE = 19;
        SAVE_TRACKER_PROFILE = 20;
        APPLY_TRACKER_PROFILE = 21;
        SEARCH_FOR_NEW_TRACKERS = 22;
        
        GET_HMD_TRACKING_SPACE_SETTINGS = 23;
        SET_HMD_TRACKING_SPACE_ORIGIN = 24;
    }
    RequestType type = 2;

    message RequestGetControllerList {
        bool include_usb_controllers = 1;
    }
    RequestGetControllerList request_get_controller_list = 3;
    
    // Parameters for START_CONTROLLER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will start streaming to client upon receiving this request
    message RequestStartPSMoveDataStream {
        int32 controller_id = 1;
        bool include_position_data = 2;
        bool include_physics_data= 3;
        bool include_raw_sensor_data= 4;
        bool include_raw_tracker_data= 5;
    }
    RequestStartPSMoveDataStream request_start_psmove_data_stream = 4;

    // Parameters for STOP_PSMOVE_DATA_STREAM
    // NOTE: DeviceDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopPSMoveDataStream {
        int32 controller_id = 1;
    }
    RequestStopPSMoveDataStream request_stop_psmove_data_stream = 5;

    // Parameters for SET_RUMBLE
    message RequestSetRumble {
        int32 controller_id = 1;
        int32 rumble = 2; // [0,255]
    }
    RequestSetRumble request_rumble = 6;

    // Parameters for RESET_POSE
    message RequestResetPose {
        int32 controller_id = 1;
    }
    RequestResetPose reset_pose = 7;   
    
    // Parameters for UNPAIR_CONTROLLER
    message RequestUnpairController {
        int32 controller_id = 1;
    }
    RequestUnpairController unpair_controller = 8;

    // Parameters for PAIR_CONTROLLER
    message RequestPairController {
        int32 controller_id = 1;
    }
    RequestPairController pair_controller = 9;

    // Parameters for CANCEL_BLUETOOTH_REQUEST
    message RequestCancelBluetoothRequest {
        int32 controller_id = 1;
    }
    RequestCancelBluetoothRequest cancel_bluetooth_request = 10;    
    
    // Parameters for SET_LED_COLOR
    message RequestSetLEDColor {
        int32 controller_id = 1;
        int32 r = 2;
        int32 g = 3;
        int32 b = 4;
    }
    RequestSetLEDColor set_led_color_request = 11;
    
    // Parameters for SET_LED_TRACKING_COLOR
    message RequestSetLEDTrackingColor {
        int32 controller_id = 1;
        TrackingColorType color_type = 2;
    }
    RequestSetLEDTrackingColor set_led_tracking_color_request = 12;
    
    // Parameters for SET_MAGNETOMETER_CALIBRATION
    message RequestSetMagnetometerCalibration {
        int32 controller_id = 1;
        FloatVector ellipse_center= 2;
        FloatVector ellipse_extents= 3;
        FloatVector ellipse_basis_x= 4;
        FloatVector ellipse_basis_y= 5;
        FloatVector ellipse_basis_z= 6;
        float ellipse_fit_error= 7;
        FloatVector magnetometer_identity= 8;
    }
    RequestSetMagnetometerCalibration set_magnetometer_calibration_request = 13;
    
    // Parameters for START_TRACKER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will start streaming to client upon receiving this request
    message RequestStartTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStartTrackerDataStream request_start_tracker_data_stream = 14;

    // Parameters for STOP_TRACKER_DATA_STREAM
    // NOTE: DeviceDataFrame packets will stop streaming to client upon receiving this request
    message RequestStopTrackerDataStream {
        int32 tracker_id = 1;
    }
    RequestStopTrackerDataStream request_stop_tracker_data_stream = 15;
    
    // Parameters for GET_TRACKER_SETTINGS
    message RequestGetTrackerSettings {
        int32 tracker_id = 1;
    }
    RequestGetTrackerSettings request_get_tracker_settings = 16;

    // Parameters for SET_TRACKER_EXPOSURE
    message RequestSetTrackerExposure {
        int32 tracker_id = 1;
        float value = 2;
    }
    RequestSetTrackerExposure request_set_tracker_exposure = 17;

    // Parameters for SET_TRACKER_GAIN
    message RequestSetTrackerGain {
        int32 tracker_id = 1;
        float value = 2;
    }
    RequestSetTrackerGain request_set_tracker_gain = 18;

    // Parameters for SET_TRACKER_OPTION
    message RequestSetTrackerOption {
        int32 tracker_id = 1;
        string option_name = 2;
        int32 option_index = 3;
    }
    RequestSetTrackerOption request_set_tracker_option = 19;

    // Parameters for SET_TRACKER_COLOR_PRESET
    message RequestSetTrackerColorPreset {
        int32 tracker_id = 1;
        TrackingColorPreset color_preset = 2;
    }
    RequestSetTrackerColorPreset request_set_tracker_color_preset = 20;
    
    // Parameters for SET_TRACKER_POSE
    message RequestSetTrackerPose {
        int32 tracker_id = 1;
        Pose pose = 2;
    }
    RequestSetTrackerPose request_set_tracker_pose = 21;
    
    // Parameters for SAVE_TRACKER_PROFILE
    message RequestSaveTrackerProfile {
        int32 tracker_id = 1;
    }
    RequestSaveTrackerProfile request_save_tracker_profile = 22;
    
    // Parameters for APPLY_TRACKER_PROFILE
    message RequestApplyTrackerProfile {
        int32 tracker_id = 1;
    }
    RequestApplyTrackerProfile request_apply_tracker_profile = 23;
    
    // No Parameters for SEARCH_FOR_NEW_TRACKERS
    
    // No Parameters for GET_HMD_TRACKING_SPACE_SETTINGS
    
    // Parameters for SET_HMD_TRACKING_SPACE_ORIGIN
    message RequestSetHMDTrackingSpaceOrigin {
        Pose origin_pose = 1;
    }
    RequestSetHMDTrackingSpaceOrigin request_set_hmd_tracking_space_origin = 24;
}

// Reliable (TCP) responses to requests
message Response {
    // The response type
    enum ResponseType {
        GENERAL_RESULT= 0;
        CONNECTION_INFO= 1;
        CONTROLLER_LIST= 2;
        CONTROLLER_LIST_UPDATED= 3;
        UNPAIR_REQUEST_COMPLETED= 4;
        PAIR_REQUEST_COMPLETED= 5;
        BLUETOOTH_REQUEST_PROGRESS= 6;
        TRACKER_LIST= 7;
        TRACKER_LIST_UPDATED= 8;
        TRACKER_SETTINGS= 9;
        TRACKER_EXPOSURE_UPDATED= 10;
        TRACKER_GAIN_UPDATED= 11;
        TRACKER_OPTION_UPDATED= 12;
        TRACKER_PRESET_UPDATED= 13;
        HMD_TRACKING_SPACE_SETTINGS= 14;
    }

    enum ResultCode {
        RESULT_OK= 0;
        RESULT_ERROR= 1;
        RESULT_CANCELED= 2;
    }

    ResponseType type = 1;
    int32 request_id = 2; // the request id that spawned this response, -1 if this is a notification
    ResultCode result_code = 3;
    
    // No Parameters for GENERAL_RESULT
    
    // Parameters for CONNECTION_INFO
    // This is returned automatically when connecting via TCP
    message ResultConnectionInfo {
        int32 tcp_connection_id = 1;
    }
    ResultConnectionInfo result_connection_info = 20;
    
    // Parameters for CONTROLLER_LIST
    // This is returned in response to a GET_CONTROLLER_LIST request
    message ResultControllerList {
        message ControllerInfo {
            int32 controller_id= 1;
            enum ConnectionType {
                USB = 0;
                BLUETOOTH = 1;
            }
            ConnectionType connection_type = 2;
            ControllerType controller_type = 3;
            TrackingColorType tracking_color_type = 4;
            string device_path = 5;
            string device_serial = 6;
            string assigned_host_serial = 7;
        }
        repeated ControllerInfo controllers = 1;
        string host_serial = 2;
    }
    ResultControllerList result_controller_list = 21;    
    
    // No parameters for CONTROLLER_LIST_UPDATED
    // No parameters for UNPAIR_REQUEST_COMPLETED
    // No parameters for PAIR_REQUEST_COMPLETED
    
    // Parameters for BLUETOOTH_REQUEST_PROGRESS
    message ResultBluetoothRequestProgress {
        int32 controller_id = 1;
        int32 steps_completed = 2;
        int32 total_steps = 3;
    }
    ResultBluetoothRequestProgress result_bluetooth_request_progress = 22;
   
    // Parameters for TRACKER_LIST
    // This is returned in response to a GET_TRACKER_LIST request
    message ResultTrackerList {
        message TrackerInfo {
            // ID of the tracker in the service
            int32 tracker_id= 1;
            
            // Tracker USB Properties
            TrackerType tracker_type = 2;
            TrackerDriver tracker_driver = 3;
            string device_path = 4;
            
            // Video Stream Properties
            string shared_memory_name = 5;
            
            // Camera Intrinsic Properties
            Pixel tracker_focal_lengths = 6;
            Pixel tracker_principal_point = 7;
            Pixel tracker_screen_dimensions = 8;
            float tracker_hfov = 9;
            float tracker_vfov = 10;
            float tracker_znear = 11;
            float tracker_zfar = 12;
            
            // Camera Extrinsic Properties
            Pose tracker_pose = 13;
        }
        repeated TrackerInfo trackers = 1;
    }
    ResultTrackerList result_tracker_list = 23;
    
    // This is returned in response to a GET_TRACKER_SETTINGS or APPLY_TRACKER_PROFILE request
    message ResultTrackerSettings {
        float exposure= 1;
        float gain= 2;
        repeated OptionSet option_sets= 3; 
        repeated TrackingColorPreset color_presets = 4;
    }
    ResultTrackerSettings result_tracker_settings = 24;
    
    // This is returned in response to a SET_TRACKER_EXPOSURE request
    message ResultSetTrackerExposure {
        float new_exposure= 1;
    }
    ResultSetTrackerExposure result_set_tracker_exposure = 25;

    // This is returned in response to a SET_TRACKER_GAIN request
    message ResultSetTrackerGain {
        float new_gain= 1;
    }
    ResultSetTrackerGain result_set_tracker_gain = 26;
    
    // This is returned in response to a SET_TRACKER_OPTION request
    message ResultSetTrackerOption {
        string option_name = 1;
        int32 new_option_index = 2;
    }
    ResultSetTrackerOption result_set_tracker_option = 27;
    
    // This is returned in response to a SET_TRACKER_COLOR_PRESET request
    message ResultSetTrackerColorPreset {
        int32 tracker_id = 1;
        TrackingColorPreset new_color_preset = 2;
    }
    ResultSetTrackerColorPreset result_set_tracker_color_preset = 28;
    
    // This is returned in response to a GET_HMD_TRACKING_SPACE_SETTINGS request
    message ResultGetHMDTrackingSpaceSettings {
        Pose origin_pose = 1;
    }
    ResultGetHMDTrackingSpaceSettings result_get_hmd_tracking_space_settings = 29;
}

// Unreliable (UDP) device data packet format
message DeviceDataFrame 
{
    // The device type
    enum DeviceCategory 
    {
        CONTROLLER= 0;
        TRACKER= 1;
    }
    DeviceCategory device_category= 1;
    
    // Update packet for a controller
    message ControllerDataPacket
    {
        // Button Index Bits
        enum ButtonType {
            TRIANGLE= 0;
            CIRCLE= 1;
            CROSS= 2;
            SQUARE= 3;
            SELECT= 4;
            START= 5;
            PS= 6;
            MOVE= 7;
            TRIGGER= 8;
            UP= 9;
            DOWN= 10;
            LEFT= 11;
            RIGHT= 12;
            L1= 13;
            L2= 14;
            L3= 15;
            R1= 16;
            R2= 17;
            R3= 18;        
        }
        
        // The id of controller this data is for
        int32 controller_id= 1;

        // Specify the type of controller this data is from
        ControllerType controller_type= 2;
        
        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // Common Controller status flags
        bool IsConnected= 4;
        
        // Raw bitmask of which buttons are currently down
        // Buttons bits are indexed using the ButtonType enum
        uint32 button_down_bitmask = 5;    
        
        // PSMove Specific Controller state
        message PSMoveState
        {   
            // PSMove Specific flags
            bool ValidHardwareCalibration= 1;
            bool IsTrackingEnabled= 2;
            bool IsCurrentlyTracking= 3;

            // Tracking position in the space of the HMD tracking camera
            Position position = 4;

            // Tracking orientation in the frame of the local magnetic field
            Orientation orientation = 5;

            // Trigger analog value [0,255]
            int32 trigger_value = 6;
            
            // Only valid if include_raw_sensor_data=true in START_CONTROLLER_DATA_STREAM request
            message RawSensorData
            {
                IntVector magnetometer= 1;
                FloatVector accelerometer= 2;
                FloatVector gyroscope= 3;
            }
            RawSensorData raw_sensor_data = 7;
            
            // Only valid if include_raw_tracker_data=true in START_CONTROLLER_DATA_STREAM request
            message RawTrackerData
            {
                repeated Pixel screen_locations= 1;
                repeated Position relative_positions= 2;
                repeated int32 tracker_ids= 3;
                repeated Ellipse projected_spheres= 4;
                repeated Polygon projected_blobs= 5;
                int32 valid_tracker_count= 6;
            }
            RawTrackerData raw_tracker_data = 8;  

            // Only valid if include_physics_data=true in START_CONTROLLER_DATA_STREAM request
            message PhysicsData
            {
                FloatVector velocity= 1;
                FloatVector acceleration= 2;
                FloatVector angular_velocity= 3;
                FloatVector angular_acceleration= 4; 
            }
            PhysicsData physics_data = 9;             
        }
        PSMoveState psmove_state = 6;
        
        // PSMove Specific Controller state
        message PSNaviState
        {
            // Trigger analog value [0,255]
            int32 trigger_value = 1;
            
            // The x-axis stick value, [0,255], Subtract 0x80 to obtain signed values
            int32 stick_xaxis = 2;
            
            // The y-axis stick value, [0,255], Subtract 0x80 to obtain signed values
            int32 stick_yaxis = 3;        
        }
        PSNaviState psnavi_state = 7;    
    }
    ControllerDataPacket controller_data_packet = 2;

    // Update packet for a tracker
    message TrackerDataPacket
    {
        // The id of tracker this data is for
        int32 tracker_id= 1;

        // Specify the type of controller this data is from
        TrackerType tracker_type= 2;
        
        // Monotonically increasing number.
        // Used to throw out old data if it arrives out of order.
        int32 sequence_num= 3;

        // Common Controller status flags
        bool IsConnected= 4;                
    }
    TrackerDataPacket tracker_data_packet = 3;
}